---
layout: post
title:  "error functions"
date:   2017-05-05 19:36:05 +1100
categories: worksheets wk10 error messages
---
```haskell
--Adds all the nodes of a tree of integers.
treeAdd :: Tree Int -> Int
treeAdd tree1 = case tree1 of
  Empty -> 0
  Node a ltree rtree -> a + (treeadd ltree) + (treead rtree)
 ```

```haskell
shadowed_function :: (Ord a, Integer b) => a -> a -> b -> x
shadowed_function x y z = case (compare x y) of 
    GT -> (fromIntegral z) + 1
    LT -> (fromIntegral z) - 1
    z  -> (fromIntegral z)
    
shadowed_function :: b -> u -> t -> t
shadowed_function = undefined
```

```haskell
index :: [a] -> [(a,Int)]
index list = case list of
    [] -> error "lol"
    (x:xs) -> helper (x:xs) 1
        where helper list acc = case list of
                  [] -> error "u wot m8"
                  (x:xs) -> (x,acc) : helper xs acc+1
```


```haskell
--adds the number 1 to a list of integers
--and calculates the length of the resulting list
addsLength :: [Int] -> Int
addsLength a = lenth (1:a)
```


```haskell
sum1 :: [a] -> a
sum1 list = case list of
    [] -> 0
    [x:xs] -> x + sum1 xs
```    

```haskell
listMap :: (a -> b) -> [a] -> [b]
listMap func list = case list of
	[]    -> []
	x:xs  -> func y : listMap func xs
```


```haskell
shadowed_function :: (Swag b, Yolo t) => b -> u -> t -> t
shadowed_function = undefined
```
